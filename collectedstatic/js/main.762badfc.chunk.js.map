{"version":3,"sources":["homepage.js","serviceWorker.js","index.js"],"names":["Homepage","react_default","a","createElement","dist","icon","type","color","iconRight","leftIconClick","alert","auto","horizonal","value","id","href","style","display","Component","Boolean","window","location","hostname","match","ReactDOM","render","homepage","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0QAyCeA,mLAnCX,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,MAAD,CACEC,KAAMJ,EAAAC,EAAAC,cAACC,EAAA,KAAD,CAAME,KAAM,OAAQC,MAAO,YACjCC,UACEP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,KAAD,CAAME,KAAM,OAAQC,MAAO,aAG/BE,cAAe,WACbC,MAAM,WAGRT,EAAAC,EAAAC,cAACC,EAAA,KAAD,CAAMO,MAAI,EAACC,WAAS,EAACN,KAAK,SAASO,MAAM,cACvCZ,EAAAC,EAAAC,cAACC,EAAA,SAAD,CAAUS,MAAM,cAAhB,kCACAZ,EAAAC,EAAAC,cAACC,EAAA,SAAD,CAAUS,MAAM,SACdZ,EAAAC,EAAAC,cAACC,EAAA,KAAD,CACEU,GAAI,aACJC,KAAM,+BACNC,MAAO,CACLC,QAAS,SAEXZ,KAAM,UANR,qBAnBSa,aCSHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAAcC,SAASC,eAAe,SDuHhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.762badfc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport 'hana-ui/hana-style.scss';\nimport {Menu,MenuItem,Link,Title,Icon} from 'hana-ui';\nclass Homepage extends Component {\n  render() {\n\n    return (\n      <div>\n        <Title\n          icon={<Icon type={'menu'} color={'#199ed8'} />}\n          iconRight={\n            <div>\n              <Icon type={'hana'} color={'#199ed8'} />\n            </div>\n          }\n          leftIconClick={() => {\n            alert('click'); // eslint-disable-line\n          }}\n        >\n          <Menu auto horizonal type=\"linear\" value=\"Activities\">\n            <MenuItem value=\"Activities\">明月不归尘</MenuItem>\n            <MenuItem value=\"Games\">\n              <Link\n                id={'githubLink'}\n                href={'https://github.com/fslong520'}\n                style={{\n                  display: 'block',\n                }}\n                icon={'github'}\n              >\n                Github\n              </Link>\n            </MenuItem>\n          </Menu>\n        </Title>\n      </div>\n\n    );\n  }\n}\n\nexport default Homepage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Homepage from './homepage';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Homepage />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}